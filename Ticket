package flightbooking;

/**
 *
 * @author Ghada
 */
public abstract class Ticket implements bookTicket {
    //    Random Ticket number for each flight

    
     /**
     * The Base Price of the seat
     */
        protected double basePrice = 0;
        protected double totalPrice = 0; 
        
    /**
     * The number of passenger's ID
     */
        protected int NumID;

    /**
     * An object from class Flight for flight details 
     */
       protected Flight DetailsF;

    /**
     *An object from class Passenger for passenger details
     */
      protected Passenger DetailsP;

         public int getNumID() {
        return NumID;
    }

    public void setNumID(int NumID) {
        this.NumID = NumID;
    }

    public Flight getDetailsF() {
        return DetailsF;
    }

    public void setDetailsF(Flight DetailsF) {
        this.DetailsF = DetailsF;
    }

    public Passenger getDetailsP() {
        return DetailsP;
    }

    public void setDetailsP(Passenger DetailsP) {
        this.DetailsP = DetailsP;
    }

    public double getBasePrice() {
        return basePrice;
    }

    public void setBasePrice(double basePrice) {
        this.basePrice = basePrice;
    }

   

    /**
     * Number of row for seats 
     */
  
    public static final int Row = 9;

    /**
     *Number of column for seats 
     */
    public static final int Col = 6;

    /**
     * Array for the seats number 
     * It won't be booked in the system 
     * It will come at the time of boarding in the main
     */
    public char[][] SeatNumber = new char[Row][Col];

 
    public char[][] getSeatNumber() {
        return SeatNumber;
    }

    public void setSeatNumber(char[][] SeatNumber) {
        this.SeatNumber = SeatNumber;
    }

    
   
    
    /**
     *default constructor Ticket
     */
    public Ticket(){
}

    /**
     *constructor Ticket
     * @param NumID
     * @param DetailsF
     * @param DetailsP
     */
    public Ticket( int NumID,Flight DetailsF, Passenger DetailsP) {
        this.NumID = (int)(Math.random()*(101));
        this.DetailsF = DetailsF;
        this.DetailsP = DetailsP;
    }

    /**
     *this method will clone the Ticket inside the flight, we will give each passenger a copy, and the passenger will change the Ticket info
it will not affect the other copies, it is supposed to take a separate copy of it (create a new object of the same type,but it will be different for each passenger)
     * @param id
     * @param f
     * @return
     */
    
    public abstract Ticket clone (Ticket id ,Flight f);

     /**
     * method toString Override    
     * @return   String For NumID
     */
    @Override
    public String toString() {
        return " ID Number : "+NumID ;
    }
    /**
     * method equals override 
     * to make sure every passenger has unique Id Number
     * @param obj
     * @return 
     */
    @Override
    public boolean equals(Object obj) {
        Ticket other = (Ticket) obj;
        
        return this.NumID == other.NumID;
    }
    
}
    
}
